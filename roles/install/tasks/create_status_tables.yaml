---
- name: create error type
  postgresql_query:
    db: "{{ hoh_db }}"
    query: |
      DO $$
      BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM pg_type t
            LEFT JOIN pg_namespace p ON t.typnamespace=p.oid
            WHERE t.typname='{{ error_type }}' AND p.nspname='{{ status_schema }}'
          ) THEN
              CREATE TYPE {{ status_schema }}.{{ error_type }} AS  ENUM ('disconnected', 'none');
          END IF;
      END
      $$;
  become: yes
  become_user: postgres

- name: create table managed_clusters
  postgresql_table:
    name: "{{ status_schema }}.{{ managed_clusters_table }}"
    db: "{{ hoh_db }}"
    columns:
      - cluster_name varchar({{ cluster_name_length_limit }}) not null
      - leaf_hub_name varchar({{ cluster_name_length_limit }}) not null
      - payload jsonb not null
      - error {{ status_schema }}.{{ error_type }} not null
  become: yes
  become_user: postgres

- name: create index on cluster_name
  postgresql_idx:
    name: "{{ managed_clusters_table }}_cluster_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    columns: cluster_name
    idxtype: btree
    unique: true
  become: yes
  become_user: postgres

- name: create index on leaf_hub_name, cluster_name
  postgresql_idx:
    name: "{{ managed_clusters_table }}_leaf_hub_cluster_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    columns: leaf_hub_name, cluster_name
    idxtype: btree
    unique: true
  become: yes
  become_user: postgres

- name: create index on payload->'metadata'->>'name'
  postgresql_idx:
    name: "{{ managed_clusters_table }}_metadata_name_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    columns: "(payload->'metadata'->>'name')"
    idxtype: btree
    unique: true
  become: yes
  become_user: postgres

- name: create index on payload->'metadata'->'labels'
  postgresql_idx:
    name: "{{ managed_clusters_table }}_labels_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    columns: "(payload->'metadata'->'labels') jsonb_ops"
    idxtype: gin
  become: yes
  become_user: postgres

- name: create index on payload->'metadata'->'labels' ->> 'leafHub'
  postgresql_idx:
    name: "{{ managed_clusters_table }}_labels_leafhub_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    columns: "(payload->'metadata'->'labels' ->> 'leafHub')"
    idxtype: btree
  become: yes
  become_user: postgres

- name: create index on payload->'status'->'clusterClaims'
  postgresql_idx:
    name: "{{ managed_clusters_table }}_cluster_claims_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    columns: "(payload->'status'->'clusterClaims') jsonb_path_ops"
    idxtype: gin
  become: yes
  become_user: postgres

- name: create compliance type
  postgresql_query:
    db: "{{ hoh_db }}"
    query: |
      DO $$
      BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM pg_type t
            LEFT JOIN pg_namespace p ON t.typnamespace=p.oid
            WHERE t.typname='{{ compliance_type }}' AND p.nspname='{{ status_schema }}'
          ) THEN
              CREATE TYPE {{ status_schema }}.{{ compliance_type }} AS  ENUM ('compliant', 'non_compliant', 'unknown');
          END IF;
      END
      $$;
  become: yes
  become_user: postgres

- name: create enforcement type
  postgresql_query:
    db: "{{ hoh_db }}"
    query: |
      DO $$
      BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM pg_type t
            LEFT JOIN pg_namespace p ON t.typnamespace=p.oid
            WHERE t.typname='{{ enforcement_type }}' AND p.nspname='{{ spec_schema }}'
          ) THEN
              CREATE TYPE {{ spec_schema }}.{{ enforcement_type }} AS  ENUM ('enforce', 'inform', 'unknown');
          END IF;
      END
      $$;
  become: yes
  become_user: postgres

- name: create policies tables
  tags: tables
  vars:
    database: "{{ hoh_db }}"
  include_tasks: create_status_policies_table.yaml
  loop:
    - "{{ policies_table }}"
    - "local_{{ policies_table }}"
  loop_control:
    loop_var: table_name

- name: create table {{ aggregated_policies_table }}
  postgresql_table:
    name: "{{ status_schema }}.{{ aggregated_policies_table }}"
    db: "{{ hoh_db }}"
    columns:
      - policy_id uuid
      - leaf_hub_name varchar({{ cluster_name_length_limit }}) not null
      - enforcement {{ spec_schema }}.{{ enforcement_type }} not null
      - applied_clusters int not null
      - non_compliant_clusters int not null
      - created_at timestamp not null default now()
      - updated_at timestamp not null default now()
  become: yes
  become_user: postgres

- name: add timestamp trigger
  vars:
    table: "{{ aggregated_policies_table }}"
    schema: "{{ status_schema }}"
  include_tasks: create_timestamp_trigger.yaml
